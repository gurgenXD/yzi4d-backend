version: "3"

services:

  db:
    environment:
      - TZ=EU/Moscow
    image: postgres:16-alpine
    container_name: db
    restart: always
    env_file:
      - ./yzi4d-backend/.env
    ports:
      - "5432"
    volumes:
      - ./db/data:/var/lib/postgresql/data

  app:
    environment:
      - TZ=EU/Moscow
    build:
      context: ./yzi4d-backend
      dockerfile: ./cicd/app/Dockerfile
    container_name: app
    restart: always
    ports:
      - "8080"
    volumes:
      - ./media:/opt/mnt/media
    command: >
      bash -c "python -m cli migrations up && python -m cli start api"
    depends_on:
      - db

  nginx:
    environment:
      - TZ=EU/Moscow
    build:
      context: ./yzi4d-backend
      dockerfile: ./cicd/nginx/Dockerfile
    container_name: nginx
    restart: always
    volumes:
      - ./media:/opt/mnt/media
    ports:
      - "80"
      - "443"
    depends_on:
      - frontend
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      # HTTPS
      - traefik.http.routers.yzi.rule=Host(`yzi4d.ru`)
      - traefik.http.routers.yzi.entrypoints=websecure
      - traefik.http.routers.yzi.service=yzi@docker
      - traefik.http.routers.yzi.tls=true
      - traefik.http.services.yzi.loadbalancer.server.port=80

  frontend:
    environment:
      - TZ=EU/Moscow
    build:
      context: ./yzi4d-frontend
      dockerfile: ./cicd/Dockerfile
    container_name: frontend
    restart: always
    ports:
      - "3000"
    command: npm run start
    depends_on:
      - app

  traefik:
    image: traefik:latest
    container_name: traefik
    restart: always
    environment:
      - TZ=EU/Moscow
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --certificatesresolvers.le.acme.email=sysadmin@yzi4d.ru
      - --certificatesresolvers.le.acme.storage=/letsencrypt/le.json
      - --certificatesresolvers.le.acme.tlschallenge=true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
      - "./logs/:/logs/"
    labels:
      - traefik.enable=true
      # HTTPS redirect
      - traefik.http.middlewares.secureHeaders.headers.stsSeconds=31536000
      - traefik.http.middlewares.secureHeaders.headers.stsIncludeSubdomains=false
      - traefik.http.middlewares.secureHeaders.headers.contentTypeNosniff=true
      - traefik.http.middlewares.secureHeaders.headers.browserXssFilter=true
      - traefik.http.middlewares.secureHeaders.headers.customFrameOptionsValue=SAMEORIGIN
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:[a-z-.]+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=https"
      - "traefik.http.middlewares.https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https.redirectscheme.permanent=false"
      - traefik.http.middlewares.compress.compress=true
      - "traefik.http.middlewares.noindex.headers.customresponseheaders.X-Robots-Tag=noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex"


#  prometheus:
#    image: prom/prometheus:latest
#    container_name: prometheus
#    user: root
#    restart: always
#    volumes:
#      - ./metrics/prometheus.yml:/etc/prometheus/prometheus.yml
#      - ./metrics/prometheus:/prometheus
#    ports:
#      - 9090:9090
#    command:
#      - --config.file=/etc/prometheus/prometheus.yml

#  grafana:
#    image: grafana/grafana:latest
#    container_name: grafana
#    user: root
#    restart: always
#    volumes:
#      - ./metrics/grafana:/var/lib/grafana
#    ports:
#      - 3000:3000
#    depends_on:
#      - prometheus

#  cadvisor:
#    image: google/cadvisor:latest
#    container_name: cadvisor
#    restart: always
#    volumes:
#      - /:/rootfs:ro
#      - /var/run:/var/run:ro
#      - /sys:/sys:ro
#      - /var/lib/docker/:/var/lib/docker:ro
#      - /dev/disk/:/dev/disk:ro
#    expose:
#      - 8080
